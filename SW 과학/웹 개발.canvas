{
	"nodes":[
		{"type":"group","id":"bd991486fcca9c32","x":-1700,"y":-1733,"width":9380,"height":6851,"label":"백 엔드"},
		{"type":"group","id":"0bb13f56331349a0","x":-1620,"y":-908,"width":4610,"height":3230,"label":"Servlet"},
		{"type":"group","id":"29b7a4505499fb00","x":-1700,"y":-4480,"width":4086,"height":2355,"label":"프론트엔드"},
		{"type":"group","id":"17624e22a7761d1e","x":3803,"y":-1131,"width":2912,"height":2491,"label":"JSP"},
		{"type":"group","id":"e51eaec3e4452255","x":-4000,"y":-3324,"width":1660,"height":1966,"label":"메모"},
		{"type":"group","id":"9652d26103e75622","x":4400,"y":1610,"width":1540,"height":1832,"label":"Session 코드 예시 "},
		{"type":"group","id":"4e0b96262dd2dee1","x":2386,"y":2571,"width":1374,"height":1989,"label":"웹 브라우저의 저장공간"},
		{"type":"group","id":"b767cd55806c4c9f","x":-1600,"y":-3600,"width":1440,"height":1375,"label":"HTML"},
		{"type":"group","id":"fffe41b206190e4a","x":3480,"y":-2285,"width":1779,"height":906,"label":"DB"},
		{"type":"group","id":"36479d9af03864c0","x":1951,"y":-783,"width":869,"height":1279,"color":"6","label":"데이터 접근방식"},
		{"type":"group","id":"25faccfd706742e1","x":1378,"y":723,"width":708,"height":1240,"label":"예시 구문"},
		{"type":"group","id":"962bf80b9d3e44e4","x":760,"y":-840,"width":880,"height":560,"color":"6","label":"데이터 전달방식"},
		{"type":"group","id":"8222cb5b655be1d0","x":-800,"y":-298,"width":430,"height":308,"label":"HTTP 메세지"},
		{"type":"text","text":"# 이클립스\n- 이미지를 추가한뒤에 폴더에 가서 refresh해야 인식이 되는듯\n\t- 껐다가 켜봤는데 인식이 잘 안되더라","id":"69f2456b2eb90d68","x":1458,"y":-1713,"width":502,"height":233},
		{"type":"text","text":"# 서블릿과 HTML 연동하기\n```html\n<form action=\"loginpage\" method=\"get\">\n\t아이디 : <input type=\"text\" name=\"user_id\" id=\"user_id\"> <br><br>\n\t비밀번호 : <input type=\"password\" name=\"user_pw\" id=\"user_pw\"> <br>\n\t<input type=\"submit\" value=\"로그인\">\n\t<input type=\"reset\" value=\"리셋\">\n</form>\n```\n### HTML의 form 태그 \n- 기본 [[HTML]]에서 데이터를 전달하는 방식은 form이 기본, 입력양식 자체를 의미\n\t- 하나의 HTML에는 하나의 form만 올 수 있음 (아이디를 다르게 할수도 있지만)\n- 한번에 여러개의 데이터를 묶어서 제출버튼을 클릭시 전송됨\n- form태그의 속성\n\t- action 속성 : 데이터를 처리할 곳을 지정\n\t\t- action에서 서블릿의 매핑된 이름을 작성하면 HTML과 서블릿이 연결됨\n\t- method 속성 : get/post 데이터 방식 결정, 기본값은 get\n\t\t- 서블릿의 doGet/doPost 중 어떤 것을 선택할 것인지에 대한 차이\n\t- navalidate : 데이터의 유효성검사 비활성화 \n- form안에 있는 input태그 name 속성의 값을 서블릿에서 받아서 처리할 수 있음","id":"a15d662bd68003fb","x":-1560,"y":-2972,"width":600,"height":632},
		{"type":"text","text":"# Null 체크(= null 처리)\n- 입력받은 값이 해당 스코프에 저장되어있는지 아닌지 판별","id":"d652d57a07aea70a","x":1558,"y":-1379,"width":442,"height":130},
		{"type":"text","text":"# 테이블 할때도 value로 값을 숨겨서 넘겨줘야 하는 경우가 있음\n```html\n<td><input type=\"hidden\" name=\"tel\" id=\"tel\" value=\"010-000-0000\"></td>\n```\n- input 태그의 hidden은 태그를 브라우저에서 가리지만 DOM으로는 존재","id":"dee6073549337426","x":-800,"y":-2625,"width":600,"height":200,"color":"5"},
		{"type":"file","file":"5. 프로그래밍 언어/JS.md","id":"f14b8d88bc05f8bf","x":1178,"y":-2625,"width":400,"height":400,"color":"4"},
		{"type":"file","file":"5. 프로그래밍 언어/JDBC.md","id":"849676ea2954374c","x":1698,"y":-2625,"width":400,"height":200},
		{"type":"file","file":"5. 프로그래밍 언어/스타일 시트/CSS.md","id":"dd3c8b1e8bca07c8","x":53,"y":-2783,"width":520,"height":516,"color":"4"},
		{"type":"file","file":"4. 웹 개발/자바빈.md","id":"bfe1cbbf2dd79fc2","x":3423,"y":-1111,"width":400,"height":470},
		{"type":"file","file":"4. 웹 개발/JSP.md","subpath":"#JSP 액션 태그","id":"831b3a12be8b0cc3","x":4333,"y":-1113,"width":500,"height":1124},
		{"type":"file","file":"9. 용어해설집/소프트웨어/API.md","id":"9104ba694d82586f","x":6695,"y":-1306,"width":459,"height":535},
		{"type":"text","text":"# 공용 API 타입은 JSON \n- 변환을 해서 가져다 준다","id":"2c61fcbc5099b05a","x":7233,"y":-1289,"width":276,"height":100},
		{"type":"text","text":"규약처럼 설명문서를 준거\n\n- 웹에서 말하는 API는 00 API?\n\t- 공용 API 등\n- 영화사에서도 API를 제공\n- 동적 데이타 JSON(XML도 있고)\n- 공공 데이터를 쓰는 법이 다 달라서 설명 문서를 작성해둠\n- 데이터로 쓰인다?\n- API가 seter 있는거? \n\t- 웹은 깊게 안해도 됨","id":"33825abc9f2e78c1","x":7233,"y":-1151,"width":350,"height":380},
		{"type":"text","text":"# 웹 브라우저의 저장공간\n-   브라우저에서 값을 넘겨받는 방식은 주로 쿼리스트링 방식\n-   key와 value값 모두 String으로 저장되며 value가 없을 시 null 값이 세팅\n    -   초기값 개념인가봐\n    토큰과 쿠키 : 웹 app과 웹 브라우저, 각각 서버에 요청하는 방식\n    \n","id":"b6f93f73f12e2222","x":2404,"y":2680,"width":600,"height":308},
		{"type":"file","file":"4. 웹 개발/웹 브라우저.md","subpath":"#쿠키 Cookies","id":"8535a2b427adca11","x":3044,"y":2680,"width":591,"height":820},
		{"type":"text","text":"# 세션 관리","id":"10790244d6e29c52","x":4804,"y":1630,"width":250,"height":60},
		{"type":"text","text":"```java\npackage session;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Date;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n\n@WebServlet(\"/loginsession\")\npublic class Session01Basic extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 인코딩\n\t\trequest.setCharacterEncoding(\"UTF-8\");\n\t\tresponse.setCharacterEncoding(\"UTF-8\");\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\t\n\t\t// 값 할당\n\t\tString userId = request.getParameter(\"user_id\");\n\t\tString userPw = request.getParameter(\"user_pw\");\n\t\t\n\t\t\n\t\t// 출력\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"로그인 아이디는 \" + userId + \"입니다.\");\n\t\tout.println(\"<br>\");\n\t\tout.println(\"로그인 비밀번호는 \" + userPw + \"입니다.\");\n\t\tout.println(\"<br>\");\n\t\tout.println(\"<br>\");\n\t\t\n\t\t// 세션 생성\n\t\t// 리퀘스트에서 세션을 받아오기\n\t\tHttpSession session = request.getSession();\n\t\t\t\t\n\t\tout.println(session.getId());\n\t\tout.println(\"<br>\");\n\t\t// 세션 존재유무\n\t\t// 새 세션인지 확인하기\n\t\tif(session.isNew()) {\n\t\t\tout.println(\"새로운 세션\");\n\t\t\tout.println(\"<br>\");\n\t\t\tif(userId != null) {\n\t\t\t\tsession.setAttribute(\"user_id\", userId);\n\t\t\t\tout.println(\"<a href='loginsession'> 로그인 상태확인(id 값이 있으면)</a>\");\n\t\t\t} else {\n\t\t\t\tout.println(\"<a href='login.html'>id 값이 없으므로 로그인 하세요</a>\");\n\t\t\t}\n\t\t\tout.println(\"<br>\");\n\t\t} else {\n\t\t\t// 최초 요청이 아닐때(이미 세션에 값 저장후) id를 가져와 이전에 로그인을 했는지 여부 확인\n\t\t\t// 세션에 입력받은 데이터를 저장하는게 키포인트\n\t\t\tString id = (String)session.getAttribute(\"user_id\");\n\t\t\tif (id != null && id.length() != 0) {\n\t\t\t\tout.println(\"안녕하세요\" + id +\"님!!\"); //세션값 적용\n\t\t\t} else {\n\t\t\t\tout.println(\"아이디 값이 없으므로 다시 로그인하세요\");\n\t\t\t\tsession.invalidate(); // 세션 해제\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tout.close();\n\t}\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tdoGet(request, response);\n\t}\n\t\n\n}\n\n```","id":"5cad7f29cbda9fde","x":4798,"y":1719,"width":1122,"height":1703},
		{"type":"text","text":"# 프레임웍 서버는 개인이 하기 힘듬","id":"b73533e67ec2d236","x":4420,"y":1742,"width":300,"height":74},
		{"type":"text","text":"# 리엑트에서 쿠키의 변동사항만 가져오는 성질을 따옴\n","id":"e1c703aea15ec4bc","x":4548,"y":3600,"width":500,"height":60},
		{"type":"file","file":"img/Pasted image 20230407144044.png","id":"0392b687ce7cfcae","x":4588,"y":4285,"width":460,"height":385},
		{"type":"text","text":"## Web storage (로컬 스토리지)\n-   저장된 데이터가 클라에 존재할 뿐 서버전송은 ❌ (=>네트워크 트래픽 비용을 줄여주는 중요한 장점)\n-   단순 문자열을 넘어 (스크립트)객체(=object)정보를 저장 가능\n\t-   체계적으로 구조화된 객체 저장 ⭕(브라우저 지원여부 확인 필요)","id":"eabf979f671c20f2","x":2453,"y":3600,"width":591,"height":193},
		{"type":"text","text":"## 세션 Session\n- 서버 메모리에 정보를 저장한 후 웹 페이지들끼리 공유\n- 로그인 페이지는 거의 세션을 이용해 구현\n- 세션이 서버쪽 코딩?\n- 세션도 쿠키의 일종\n\n### 세션을 이용한 웹 페이지 연동\n- 웹 페이지들끼리 공유 정보를 서버에 저장 / 웹 페이지들을 매개해주는 방법\n- 서버의 메모리에 생성되어 정보를 저장\n- 로그인처럼 보안이 요구되는 정보는 대부분 세션을 이용\n- ⭐각 브라우저 당 한개 (= 사용자당 한개가 생성)\n\n### 세션 실행과정\n- 클라이언트 브라우저 -> 서버에 최초 접속 \n\t- 서버의 서블릿은 세션 객체를 생성\n\t- 세션 객체에 대한 세션 id를 브라우저에 전송 \n\t\t(서버에 저장후 불러와서 브라우저에 또 저장)\n\t- 브라우저는 서버로부터 받은 세션 id를 브라우저가 사용하는 세션 쿠키에 저장\n\t- 서버로부터 전송된 세션 id도 일종의 쿠키\n- 클라이언트 브라우저 -> 재접속시 \n\t- 세션 쿠키에 저장된 세션 id를 다시 서버로 전송\n\t- 서버에서는 전송된 세션 id를 이용\n\t- 브라우저 세션 객체에 접근하여 브라우저에 대한 작업 수행\n### 세션의 중요한 특징\n- 브라우저당 한개 생성 -> 사용자당 한개 생성\n- 브라우저 종료시 세션 해제\n\n","id":"948baa966e2e6d55","x":3084,"y":3600,"width":591,"height":820},
		{"type":"text","text":"# HTTP 프로토콜 서버 통신 방법\n- 클라이언트폭 통신시 stateless 방식으로 통신\n\t- 즉, 브라우저에서 새 페이지를 열면 브라우저간 어떤 연결도 없으므로  각 브라우저들끼리는 웹페이지의 상태나 정보를 모름 \n\t- 따라서 웹 페이지나 서블릿끼리 상태나 정보를 간단히 공유하려면 쿠키, 세션을 이용함\n- Statless (무상태)\n\t- **클라이언트-서버 관계에서 서버가 클라이언트의 상태를 보존하지 않음**을 의미한다. Stateless 구조에서 server는 단순히 요청이 오면 응답을 보내는 역할만 수행하며, 세션 관리는 클라이언트에게 책임이 있다.","id":"10d09de719dcf02b","x":2781,"y":4783,"width":607,"height":335},
		{"type":"text","text":"# 실제 서비스할 때는 대소문자 안씀\n","id":"fd6d048dd6ad69cd","x":-3980,"y":-3079,"width":371,"height":50},
		{"type":"text","text":"# 웹은 옛날 방식을 알아야함 ","id":"2ca4619b2385d5d2","x":-3980,"y":-3011,"width":280,"height":50},
		{"type":"text","text":"# 404 에러시 대처방법\n- [이클립스 톰캣 설정 수정](https://dev-handbook.tistory.com/32)\n- [경로지우고 재시작](https://clsrn4561.tistory.com/10)\n- [이외의 방법 링크 모음](https://october-east-sea.tistory.com/160)","id":"c831581e636c3245","x":-3980,"y":-2936,"width":320,"height":152,"color":"1"},
		{"type":"text","text":"# 질문\n- 로케이션 방식 : 서버에서 JS를 html 파일에 넣어서 이동하게 만드는 거\n- addHeader : 지정한 시간이 지난 뒤에 맵핑한 곳으로 이동\n-> 그냥 바인딩을 쓰면 됨","id":"ab0d79803cc1f5a4","x":-3980,"y":-2775,"width":427,"height":198,"color":"5"},
		{"type":"text","text":"# 쿼리스트링을 이용해서 값을 넘기는 방식말고 세팅하는 방법도 있던 것 같던데","id":"2bb601ac3dfdd469","x":-3968,"y":-3260,"width":509,"height":120},
		{"type":"text","text":"# WAS 서버 톰캣이 미들웨어\n- DB 접속의 업무단위를 트랜젝션이라고 함","id":"8e9849359ac3e62f","x":-3080,"y":-2238,"width":377,"height":130},
		{"type":"file","file":"img/Pasted image 20230412092551.png","id":"ac70d453c2e8e87e","x":-3057,"y":-2058,"width":400,"height":231},
		{"type":"text","text":"# 관련 자격증\n- 웹 디자인 기능사\n- 정보처리기사 <- 빠르게 따는게 좋음\n\t- 공적증명? : 4대보험 가입기간 ","id":"12c07cf7e07189c5","x":-3040,"y":-2943,"width":320,"height":240},
		{"type":"text","text":"# 서블릿 컨테이너가 WAS 아닌가?","id":"da42f13456c3fad4","x":-2680,"y":-2943,"width":250,"height":240},
		{"type":"text","text":"# 웹 브라우저가 인식하는 것은 HTML, CSS, JS 뿐이라서 Servlet이나 JSP 코드를 HTML 안에 넣는다고 해도 WAS를 거치지 않으면 인식불가능","id":"5b0fb0229edaad5b","x":-2891,"y":-3224,"width":433,"height":120},
		{"type":"text","text":" # 바인딩 \n- request 객체를 통해 전달된 데이터 받기 = 바인딩 = 브라우저 거치지 않고 서버에서 데이터 전달 작업\n- 브라우저 안거치고 서버 내에서 처리","id":"132203cdcbf240f3","x":2161,"y":1245,"width":433,"height":206},
		{"type":"file","file":"9. 용어해설집/소프트웨어/Scope.md","id":"7602fe9aaf5218df","x":2161,"y":1596,"width":581,"height":459,"color":"1"},
		{"type":"text","text":"1. 첫 번째 서블릿\n\t```java\n\t// 웹 브라우저에서 요청한 request객체에 해당 값을 바인딩\n\trequest.setAttribute(\"name\", \"이름\");\n\t// 두번째 서블릿으로 전달 웹브라우저를 통해서 처리\n\tresponse.sendRedirect(\"location2\");\n\t```\n2. 두 번째 서블릿\n\t```java\n\tPrintWriter out = response.getWriter();\n\tout.println(\"로딩됨\");\n\tString name = (String)request.getAttribute(\"name\"); //null 출력\n\tout.println(name);\n\tout.close();\n\t```","id":"7e039b74f6368eb7","x":1418,"y":923,"width":640,"height":407},
		{"type":"text","text":"- 리퀘스트 주소 소속의 setAttribute / getAttribute와 forward를 이용해서 서로 다른 서블릿 간에 값을 받아올 수 있음. 이게 바인딩\n\n1. 첫번째 서블릿 :  바인딩 후 포워딩\n\t``` java\n\t// 웹 브라우저에서 요청한 request객체에 해당 값을 바인딩\n\trequest.setAttribute(\"name\", \"이름\");\n\t// 포워드\n\tRequestDispatcher dis = request.getRequestDispatcher(\"두번째 서블릿\");\n\tdis.forward(request, response);\n\t```\n\n2. 두번째 서블릿 : 바인딩 된 값을 브라우저에 출력\n\t```java\n\tString address = (String)request.getAttribute(\"name\");\n\tout.println(address);\n\t```","id":"b93f0fb276a23db2","x":1418,"y":1450,"width":640,"height":460},
		{"type":"text","text":"웹 페이지가 새로 생성되면 Req와 Res가 새로 생성됨\n웹 페이지간의 데이터 공유가 안됨 \n따라서 null 값이 출력됨\n값을 얻어오고 싶으면 포워드 필수","id":"a8e381c8be2a81d2","x":1416,"y":763,"width":400,"height":121,"color":"1"},
		{"type":"text","text":"# 디스패처란? Dispatcher\n- 다른 서블릿으로 req/ res를 넘겨주는 걸 말하는 듯\n\n### 작동방식\n- 서버에서 포워딩 -> 웹 브라우저 주소창이 변경되지 않음\n- 클라이언트에서 요청이 들어오면 첫번째 서블릿이 RequestDispatcher 객체를 이용해 두번째 서블릿으로 전달\n- 포워딩 + 바인딩(세트)","id":"5767c37ea56c7892","x":1818,"y":555,"width":420,"height":353},
		{"type":"text","text":"# 서블릿 포워드 기능\n> 서블릿 간의 데이터 공유를 위해서 나온 개념\n\n- 파라미터 방식으로 값을 넘김\n- 데이터 공유때문에 나온 것이 쿠키와 세션\n- 데이터 범위를 어떻게 지정할 것인지가 이슈\n- 데이터 스코프\n\t- Context / 로컬 / 지역 / 전역\n\n- 웹 브라우저에서 요청한 request 객체에 해당 값을 바인딩\n- response\n\t- 바인딩과 세트라고 생각할 것\n```java\n// 전송할 위치\nRequestDispatcher dis = request.getRequestDispatcher(\"두번째 서블릿\");\n// forward 메소드를 이용해 실행\ndis.forward(request, response);\n```\n","id":"e0bbf0358ad2685c","x":420,"y":116,"width":585,"height":500},
		{"type":"text","text":"# 서블릿 생명주기 메서드\n-   초기화 과정 → 메모리에 인스턴스 생성 → 서비스 수행 → 소멸\n-   서블릿은 각 요청 실행 단계마다 호출되며 기능을 수행하는 콜백 메서드들이 있음\n    1.  `init()` : 생성시 초기화 작업 수행(서블릿 요청시 맨 처음 단, 한번만 호출), 생략가능\n    2.  `doGet() / doPost()`\n        1.  작업 수행 → 서블릿 호출시 매번 호출, 실제로 클라이언트가 요청하는 작업을 수행\n        2.  서블릿 구현의 핵심으로 반드시 구현\n    3.  `destory()` : 종료(서블릿 기능을 수행 후 소멸될때 호출되는 메소드 / 서블릿 마무리 작업시 주로 수행), 생략가능\n-   서블릿 동작과정과 코딩 순서가 동일함\n    1.  서블릿 클래스 만들시 → 개발자 코딩\n    2.  서블릿 생명주기 메서드 구현 -> inint(), doGet()이나 doPost 사용, destory()\n    3.  서블릿 매핑 작업 : web.xml 또는 어노테이션 사용(병행불가)\n    4.  클라이언트 (웹브라우저) 서블릿 매핑이름 요청\n    5.  어노테이션 과정을 거쳐서 주소창에 get방식으로 출력","id":"6652874cf35d984f","x":-480,"y":-854,"width":665,"height":460},
		{"type":"file","file":"4. 웹 개발/Servlet.md","subpath":"#브라우저 데이터 접근방식","id":"684288587fe07986","x":2229,"y":-664,"width":529,"height":1088},
		{"type":"text","text":"# Request 요청","id":"402102ac41feadad","x":-640,"y":-278,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"# Response 응답","id":"baea5bebb33dcd95","x":-640,"y":-70,"width":250,"height":60,"color":"3"},
		{"type":"file","file":"4. 웹 개발/Servlet.md","id":"6a9c30d1810f2478","x":-1520,"y":-567,"width":513,"height":721,"color":"4"},
		{"type":"text","text":"row는 Y축","id":"b211e67cb34ec9e7","x":3940,"y":-2265,"width":167,"height":60},
		{"type":"text","text":"# DB 설계\n- DB 설계의 기본 단위는 테이블\n\t- 칼럼명을 반드시 자바빈의 멤버변수와 맞춰줘야 함, 아니면 에러발생\n\t- row 값은 의미가 없음?\n\t- 데이터 타입이 민감","id":"c5edf306627e18d2","x":3560,"y":-2205,"width":380,"height":280},
		{"type":"file","file":"5. 프로그래밍 언어/마크업 언어/HTML.md","id":"f0513ba69f272066","x":-1560,"y":-3520,"width":720,"height":320,"color":"4"},
		{"id":"a4113d78e9f84cbe","x":-800,"y":154,"width":580,"height":1200,"type":"file","file":"4. 웹 개발/Servlet.md","subpath":"#데이터 가져오고 출력하기"},
		{"type":"file","file":"4. 웹 개발/JSP.md","subpath":"#EL (Expression Language)","id":"3d9a79b599c797c0","x":3867,"y":151,"width":480,"height":1112},
		{"type":"file","file":"4. 웹 개발/JSP.md","id":"588e51b145826945","x":5025,"y":11,"width":610,"height":880,"color":"4"},
		{"id":"7f029f0ed4e71b37","x":4583,"y":891,"width":400,"height":400,"type":"file","file":"4. 웹 개발/JSP.md","subpath":"#JSP 예외처리(exception) 페이지"},
		{"id":"c4414c1805f4452c","x":3490,"y":938,"width":250,"height":82,"type":"text","text":"# EL의 내장객체를 통해서 바인딩도 가능"},
		{"id":"4cc5446ec771ca27","x":3504,"y":1102,"width":250,"height":218,"type":"text","text":"# Scope에 키값 할당하기(바인딩이라고 함)\nrequest.setAttribute(\"address\", \"서울시 성동구\");\n- setAtrribute를 이용"},
		{"type":"text","text":"# Binding (Object로 받음)\n- 전달하는 데이터의 양이 적을 때는 Get 방식으로 전달 할 수 있지만 Get은 많은 데이터를 전달하지 못하는 단점이 존재\n- 웹 프로그램 실행시에 데이터를 서블릿 관련 객체에 저장하는 방법이 나옴 \n\t- WAS가 알아서 해줌\n\t- HttpServletRequest, HttpSession, ServletContext 객체를 통해 제공\n\t- 저장된 데이터는 서블릿으로 JSP에서 서로 전달하고 공유하며 사용\n- 서버에서 객체를 이용해서 포워딩하니까 주소창이 변경이 안됨","id":"7a80fb6021784057","x":1200,"y":95,"width":388,"height":460},
		{"type":"text","text":"# Post\n1. 서블릿에 데이터를 전송시 데이터가 body영역에 숨겨진 채 전송\n2. 보안에 유리\n3. 서블릿에서 doPost()를 이용해 데이터 처리","id":"a729a9bbfd39c59f","x":1200,"y":-784,"width":383,"height":298},
		{"type":"text","text":"# Get (디폴트)\n1. 서블릿에 데이터 전송시 데이터가 URL 뒤 `속성명=속성값` 형태로 전송되며 주소창에 보임\n2. 여러 데이터 전송시 &로 구현\n3. 보안에 취약\n4. 최대 256비트\n5. 기본 데이터 전송방식\n6. 웹 브라우저에 직접 입력 전송가능\n7. 서블릿에서 doGet()을 이용해 데이터 처리","id":"b3053a5cb488228d","x":777,"y":-784,"width":383,"height":298}
	],
	"edges":[
		{"id":"91b30f386c9f521e","fromNode":"a15d662bd68003fb","fromSide":"bottom","toNode":"402102ac41feadad","toSide":"left"},
		{"id":"e0b289c50f2b8a57","fromNode":"a8e381c8be2a81d2","fromSide":"right","toNode":"7e039b74f6368eb7","toSide":"top"},
		{"id":"56a50f7d2dbf9f24","fromNode":"7e039b74f6368eb7","fromSide":"bottom","toNode":"b93f0fb276a23db2","toSide":"top","label":"포워드를 추가해서 \n이렇게 수정하면 null없이 값이 찰 출력됨"},
		{"id":"f499a8b1c4e7b112","fromNode":"e0bbf0358ad2685c","fromSide":"right","toNode":"7a80fb6021784057","toSide":"left","label":"포워드와 바인딩은 세트"},
		{"id":"779e9633ef101c2b","fromNode":"baea5bebb33dcd95","fromSide":"right","toNode":"e0bbf0358ad2685c","toSide":"top"},
		{"id":"32ccbb399dbdb247","fromNode":"7a80fb6021784057","fromSide":"bottom","toNode":"25faccfd706742e1","toSide":"top","label":"포워딩/디스패처과정"},
		{"id":"919500ee4d20f45a","fromNode":"7a80fb6021784057","fromSide":"right","toNode":"5767c37ea56c7892","toSide":"top"},
		{"id":"7dcd2df281d7ee02","fromNode":"4e0b96262dd2dee1","fromSide":"right","toNode":"0392b687ce7cfcae","toSide":"top","label":"저장공간 확인하기"},
		{"id":"e5ed05cc94949f93","fromNode":"4e0b96262dd2dee1","fromSide":"bottom","toNode":"10d09de719dcf02b","toSide":"top","label":"HTTP 서버통신방법"},
		{"id":"53afe7a01c1e8433","fromNode":"36479d9af03864c0","fromSide":"right","toNode":"4e0b96262dd2dee1","toSide":"top"},
		{"id":"95d8eb9a9981eadd","fromNode":"d652d57a07aea70a","fromSide":"bottom","toNode":"36479d9af03864c0","toSide":"top"},
		{"id":"7fa469658aa79329","fromNode":"7602fe9aaf5218df","fromSide":"top","toNode":"132203cdcbf240f3","toSide":"bottom"},
		{"id":"d42be132aa9121ec","fromNode":"e1c703aea15ec4bc","fromSide":"left","toNode":"8535a2b427adca11","toSide":"right"},
		{"id":"4eff20de1512275e","fromNode":"33825abc9f2e78c1","fromSide":"left","toNode":"9104ba694d82586f","toSide":"right"},
		{"id":"9cb85bf3fa98e82d","fromNode":"2c61fcbc5099b05a","fromSide":"left","toNode":"9104ba694d82586f","toSide":"right"},
		{"id":"cfc7ba827f72ca61","fromNode":"c5edf306627e18d2","fromSide":"bottom","toNode":"bfe1cbbf2dd79fc2","toSide":"top"},
		{"id":"9e4d076c1f8c00cf","fromNode":"b211e67cb34ec9e7","fromSide":"bottom","toNode":"c5edf306627e18d2","toSide":"right"},
		{"id":"3f2647b65e90c4f6","fromNode":"7f029f0ed4e71b37","fromSide":"top","toNode":"588e51b145826945","toSide":"left","label":"JSP에서도 예외처리 가능"},
		{"id":"d1497fe7d1aa6a66","fromNode":"3d9a79b599c797c0","fromSide":"right","toNode":"588e51b145826945","toSide":"left"},
		{"id":"e9e55bce88984bfe","fromNode":"bfe1cbbf2dd79fc2","fromSide":"bottom","toNode":"3d9a79b599c797c0","toSide":"left"},
		{"id":"7ef9b22d4a7c97b4","fromNode":"bfe1cbbf2dd79fc2","fromSide":"right","toNode":"831b3a12be8b0cc3","toSide":"left","label":"JSP에서 \n자바빈 사용하기"},
		{"id":"7c5df69601914c1a","fromNode":"831b3a12be8b0cc3","fromSide":"bottom","toNode":"3d9a79b599c797c0","toSide":"top","label":"EL로 자바빈 empty여부 확인가능"},
		{"id":"44539426d94f09f3","fromNode":"7602fe9aaf5218df","fromSide":"right","toNode":"831b3a12be8b0cc3","toSide":"left"},
		{"id":"4caa21b903e6f30a","fromNode":"7602fe9aaf5218df","fromSide":"right","toNode":"4e0b96262dd2dee1","toSide":"top","label":"저장범위를 Scope라고 함"},
		{"id":"7f35950c94d838ce","fromNode":"10790244d6e29c52","fromSide":"right","toNode":"5cad7f29cbda9fde","toSide":"top"},
		{"id":"a7b53016c8b3bec3","fromNode":"948baa966e2e6d55","fromSide":"right","toNode":"9652d26103e75622","toSide":"left"},
		{"id":"59cf0513aa8afbe4","fromNode":"f14b8d88bc05f8bf","fromSide":"right","toNode":"849676ea2954374c","toSide":"left"},
		{"id":"b62eefd8e8270cae","fromNode":"849676ea2954374c","fromSide":"bottom","toNode":"fffe41b206190e4a","toSide":"top"},
		{"id":"69afb7f9284e9da7","fromNode":"29b7a4505499fb00","fromSide":"bottom","toNode":"bd991486fcca9c32","toSide":"top"},
		{"id":"60392e3088c01149","fromNode":"588e51b145826945","fromSide":"top","toNode":"831b3a12be8b0cc3","toSide":"right","label":"JSP에서 포워딩하기"},
		{"id":"e9b26aca40024ce5","fromNode":"5b0fb0229edaad5b","fromSide":"right","toNode":"29b7a4505499fb00","toSide":"left"},
		{"id":"cc0a08d05f93702f","fromNode":"6a9c30d1810f2478","fromSide":"right","toNode":"6652874cf35d984f","toSide":"left"},
		{"id":"db5f5c99c6f888b2","fromNode":"6a9c30d1810f2478","fromSide":"right","toNode":"8222cb5b655be1d0","toSide":"left"},
		{"id":"e180a475e5f980c7","fromNode":"8222cb5b655be1d0","fromSide":"bottom","toNode":"a4113d78e9f84cbe","toSide":"top"},
		{"id":"795a8b5bf6e5c763","fromNode":"c4414c1805f4452c","fromSide":"right","toNode":"3d9a79b599c797c0","toSide":"left"},
		{"id":"68bf187364a01bfa","fromNode":"4cc5446ec771ca27","fromSide":"left","toNode":"132203cdcbf240f3","toSide":"right"}
	]
}